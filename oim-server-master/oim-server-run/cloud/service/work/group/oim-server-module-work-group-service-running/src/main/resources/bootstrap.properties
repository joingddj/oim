server.port = 11004
spring.application.name = work-group

management.endpoints.web.exposure.include = *
management.endpoints.jolokia.enabled = true
management.endpoint.health.show-details= ALWAYS

only.action.dispatcher.response-handle-enable=true
only.action.dispatcher.error-code-prefix=2
only.action.dispatcher.error-code-separator=.

system.action.register.action-packages[0]=com.oimchat.server

spring.profiles.active = config

logging.file.name = logs/oim-server.log

eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
eureka.client.serviceUrl.defaultZone: http://127.0.0.1:10001/eureka/

spring.aware.log4j2.loggers= [{"name": "root","level": "info"},{"name": "com.oimchat","level": "debug"}]

# hibernate配置
# create,update
spring.aware.hibernate.setting.hbm2ddl.auto=update
spring.aware.hibernate.setting.dialect=org.hibernate.dialect.MySQL8Dialect
spring.aware.hibernate.entity-packages[0]=com.oimchat.server



# 数据库配置，默认集成了sharding-jdbc,有需要分库分表的可以使用 具体配置看官网
# false：关闭sharding-jdbc使用druid
# true：关闭druid使用sharding-jdbc
spring.shardingsphere.enabled=false

#数据库配置
spring.shardingsphere.datasource.names=master0

## 节点0，主库
spring.shardingsphere.datasource.master0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master0.url=jdbc:mysql://127.0.0.1:3306/oim_work_group?serverTimezone=GMT%2B8&useUnicode=true&&useSSL=false&useCompression=true&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.master0.username=root
spring.shardingsphere.datasource.master0.password=123456
spring.shardingsphere.datasource.master0.web-stat-filter.enabled=false
spring.shardingsphere.datasource.master0.stat-view-servlet.enabled=false
spring.shardingsphere.datasource.master0.initial-size=5
spring.shardingsphere.datasource.master0.max-active=100
spring.shardingsphere.datasource.master0.min-idle=5
spring.shardingsphere.datasource.master0.max-wait=60000
spring.shardingsphere.datasource.master0.min-evictable-idle-time-millis=300000
spring.shardingsphere.datasource.master0.validation-query=SELECT 1 FROM DUAL
spring.shardingsphere.datasource.master0.test-while-idle=true
spring.shardingsphere.datasource.master0.test-on-borrow=false
spring.shardingsphere.datasource.master0.test-on-return=false
spring.shardingsphere.datasource.master0.pool-prepared-statements=false

## 开发环境下开启方便调试
spring.shardingsphere.props.sql.show=true

# 以下分库分表才有用
#### 数据库分片策略 hash一致性算法
#spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column = id
#spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name = com.onlyxiahui.aware.extend.shardingsphere.algorithm.ConsistentHashPreciseShardingAlgorithm
#### 分表策略，同分库策略
#spring.shardingsphere.sharding.default-table-strategy.standard.sharding-column = id
#spring.shardingsphere.sharding.default-table-strategy.standard.precise-algorithm-class-name = com.onlyxiahui.aware.extend.shardingsphere.algorithm.ModulusLongPreciseShardingAlgorithm


spring.datasource.druid.name = DataSource-${spring.application.name}
spring.datasource.druid.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.druid.url = jdbc:mysql://127.0.0.1:3306/oim_work_group?serverTimezone=GMT%2B8&useUnicode=true&&useSSL=false&useCompression=true&zeroDateTimeBehavior=convertToNull&allowPublicKeyRetrieval=true
spring.datasource.druid.username = root
spring.datasource.druid.password = 123456
# 关掉web sql监控
spring.datasource.druid.web-stat-filter.enabled = false
spring.datasource.druid.stat-view-servlet.enabled = false
# 初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时
spring.datasource.druid.initial-size = 5
# 最大连接池数量
spring.datasource.druid.max-active = 100
# 最小连接池数量
spring.datasource.druid.min-idle = 5
# 获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.druid.max-wait = 60000
# 连接保持空闲而不被驱逐的最小时间
spring.datasource.druid.min-evictable-idle-time-millis = 300000
# 用来检测连接是否有效的sql，要求是一个查询语句，常用select 'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。
spring.datasource.druid.validation-query = SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle = true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow = false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-return = false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements = false



# Redis
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=123456
# Redis数据库索引（默认为0）
spring.redis.database=0
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=5000


# RabbitMQ
rabbitmq.host = 127.0.0.1
rabbitmq.port = 5672
rabbitmq.virtual-host = oim
rabbitmq.username = admin
rabbitmq.password = 123456
rabbitmq.channel-cache-size =5